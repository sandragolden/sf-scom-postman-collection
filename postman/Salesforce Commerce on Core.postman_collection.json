{
	"info": {
		"_postman_id": "f6fc5acd-048f-42b9-b07e-3fc6ecb48a3e",
		"name": "Salesforce Commerce on Core",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19492"
	},
	"item": [
		{
			"name": "Auth Salesforce API",
			"item": [
				{
					"name": "Auth Salesforce API via Connected App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token_type).to.exist;",
									"    pm.expect(data.token_type).to.be.a.string;",
									"    pm.expect(data.access_token).to.exist;",
									"    pm.expect(data.access_token).to.be.a.string;",
									"    const id = data.id.split('/');",
									"",
									"    pm.collectionVariables.set('_accessToken', data.access_token);",
									"    pm.collectionVariables.set('_instanceUrl', data.instance_url);",
									"    pm.collectionVariables.set('_userId', id.pop());",
									"    pm.collectionVariables.set('orgId', id.pop());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean up the variables",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}{{secretToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{loginUrl}}/services/oauth2/token",
							"host": [
								"{{loginUrl}}"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
									"    const url = result.serverUrl.split('/');",
									"",
									"    pm.expect(result.sessionId).to.exist;",
									"    pm.expect(result.sessionId).to.be.a.string;",
									"",
									"    pm.collectionVariables.set('_accessToken', result.sessionId);",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + \"//\" + url[2]);",
									"    pm.collectionVariables.set('_userId', result.userId);",
									"    pm.collectionVariables.set('orgId', result.userInfo.organizationId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8"
							},
							{
								"key": "SOAPAction",
								"value": "login"
							},
							{
								"key": "Accept",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <env:Body>\n        <n1:login>\n            <n1:username><![CDATA[{{username}}]]></n1:username>\n            <n1:password><![CDATA[{{password}}]]></n1:password>\n        </n1:login>\n    </env:Body>\n</env:Envelope>"
						},
						"url": {
							"raw": "{{loginUrl}}/services/Soap/u/{{version}}",
							"host": [
								"{{loginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{version}}"
							]
						},
						"description": "Logs in to the login server and starts a client session.\n\nMake sure to set the `url`, `username`, `password` and `secretToken` environment variables before sending this request.\nOn success, the request will automatically collect your authentication token for later use."
					},
					"response": []
				},
				{
					"name": "Login Buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
									"    const url = result.serverUrl.split('/');",
									"",
									"    pm.expect(result.sessionId).to.exist;",
									"    pm.expect(result.sessionId).to.be.a.string;",
									"",
									"    pm.collectionVariables.set('_accessToken', result.sessionId);",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + \"//\" + url[2]);",
									"    pm.collectionVariables.set('_userId', result.userId);",
									"    pm.collectionVariables.set('orgId', result.userInfo.organizationId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8"
							},
							{
								"key": "SOAPAction",
								"value": "login"
							},
							{
								"key": "Accept",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <env:Header>\n        <!--\n        ensure API is enabled\n        Administration Setup > Manage Users > Profiles > Users Profile > Administrative Permissions > API Enabled\n        -->\n        <n1:LoginScopeHeader>\n            <n1:organizationId>{{orgId}}</n1:organizationId>\n        </n1:LoginScopeHeader>\n    </env:Header>\n    <env:Body>\n        <n1:login>\n            <n1:username><![CDATA[{{buyerUsername}}]]></n1:username>\n            <n1:password><![CDATA[{{buyerPassword}}]]></n1:password>\n        </n1:login>\n    </env:Body>\n</env:Envelope>"
						},
						"url": {
							"raw": "{{loginUrl}}/services/Soap/u/{{version}}",
							"host": [
								"{{loginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{version}}"
							]
						},
						"description": "Logs in to the login server and starts a client session.\n\nMake sure to set the `url`, `username`, `password` and `secretToken` environment variables before sending this request.\nOn success, the request will automatically collect your authentication token for later use."
					},
					"response": []
				}
			]
		},
		{
			"name": "Webstore",
			"item": [
				{
					"name": "Query Webstore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.records).to.exist;",
									"    pm.expect(data.records).to.be.an('array');",
									"    pm.expect(data.records.length).to.eql(1);",
									"    const webStore = data.records[0];",
									"    pm.expect(webStore.Id).to.exist;",
									"    pm.expect(webStore.Id).to.be.a.string;",
									"    pm.collectionVariables.set('_webStoreId', webStore.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"query",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Payment Gateway",
			"item": [
				{
					"name": "Create Payment Gateway Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate result and save collection variables', () => {",
									"    let data = pm.response.json();",
									"    const paymentGatewayProvider = data.compositeResponse.find((result) => result.referenceId === 'paymentGatewayProvider');",
									"    pm.expect(paymentGatewayProvider).to.exist;",
									"    pm.expect(paymentGatewayProvider.body).to.exist;",
									"    pm.expect(paymentGatewayProvider.body.id).to.exist;",
									"    pm.expect(paymentGatewayProvider.body.id).to.be.a.string;",
									"    pm.collectionVariables.set('_paymentGatewayProviderId', paymentGatewayProvider.body.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{paymentGatewayProviderApexClassName}}'\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/PaymentGatewayProvider\",\n            \"referenceId\": \"paymentGatewayProvider\",\n            \"body\": {\n                \"ApexAdapterId\": \"@{apexClass.records[0].Id}\",\n                \"DeveloperName\": \"{{paymentGatewayProviderDeveloperName}}\",\n                \"MasterLabel\": \"{{paymentGatewayProviderDeveloperName}}\",\n                \"Language\": \"en_US\",\n                \"IdempotencySupported\": \"Yes\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"composite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"const validateResults = (refId) => {",
									"    pm.test(`Validate ${refId}`, () => {",
									"        let data = pm.response.json();",
									"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
									"        pm.expect(refResult).to.exist;",
									"        pm.expect(refResult.body).to.exist;",
									"        pm.expect(refResult.body.records).to.exist;",
									"        pm.expect(refResult.body.records).to.be.an('array');",
									"        pm.expect(refResult.body.records.length).to.eql(1);",
									"        pm.expect(refResult.body.records[0].Id).to.exist;",
									"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
									"    });",
									"};",
									"",
									"validateResults('apexClass');",
									"validateResults('namedCredential');",
									"validateResults('paymentGatewayProvider');",
									"",
									"pm.test('Validate paymentGateway', () => {",
									"    let data = pm.response.json();",
									"    const paymentGateway = data.compositeResponse.find((result) => result.referenceId === 'paymentGateway');",
									"    pm.expect(paymentGateway).to.exist;",
									"    pm.expect(paymentGateway.httpStatusCode).to.eql(201);",
									"    pm.expect(paymentGateway.body.id).to.exist;",
									"    pm.expect(paymentGateway.body.id).to.be.a.string;",
									"    pm.expect(paymentGateway.body.success).to.exist;",
									"    pm.expect(paymentGateway.body.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+NamedCredential+WHERE+DeveloperName+=+'{{namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/PaymentGateway\",\n            \"referenceId\": \"paymentGateway\",\n            \"body\": {\n                \"PaymentGatewayProviderId\": \"@{paymentGatewayProvider.records[0].Id}\",\n                \"MerchantCredentialId\": \"@{namedCredential.records[0].Id}\",\n                \"Status\": \"Active\",\n                \"PaymentGatewayName\": \"{{paymentGatewayName}}\",\n                \"ExternalReference\": \"{{paymentGatewayName}}\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"composite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Payment Gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"const validateResults = (refId) => {",
									"    pm.test(`Validate ${refId}`, () => {",
									"        let data = pm.response.json();",
									"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
									"        pm.expect(refResult).to.exist;",
									"        pm.expect(refResult.body).to.exist;",
									"        pm.expect(refResult.body.records).to.exist;",
									"        pm.expect(refResult.body.records).to.be.an('array');",
									"        pm.expect(refResult.body.records.length).to.eql(1);",
									"        pm.expect(refResult.body.records[0].Id).to.exist;",
									"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
									"    });",
									"};",
									"",
									"validateResults('apexClass');",
									"validateResults('namedCredential');",
									"validateResults('paymentGatewayProvider');",
									"validateResults('paymentGateway');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+Endpoint+FROM+NamedCredential+WHERE+DeveloperName+=+'{{namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+MasterLabel,+ApexAdapterId,+IdempotencySupported,+Language+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+PaymentGateway+WHERE+PaymentGatewayProviderId+=+'@{paymentGatewayProvider.records[0].Id}'+AND+MerchantCredentialId+=+'@{namedCredential.records[0].Id}'+AND+PaymentGatewayName+=+'{{paymentGatewayName}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"paymentGateway\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"composite"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WebStore External Services",
			"item": [
				{
					"name": "Inventory",
					"item": [
						{
							"name": "Register Inventory External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let data = pm.response.json();",
											"    const extService = data.compositeResponse.find((result) => result.referenceId === 'inventoryRegisteredExternalService');",
											"    pm.expect(extService).to.exist;",
											"    pm.expect(extService.httpStatusCode).to.eql(201);",
											"    pm.expect(extService.body).to.exist;",
											"    pm.expect(extService.body.id).to.exist;",
											"    pm.expect(extService.body.id).to.be.a.string;",
											"    pm.collectionVariables.set('_inventoryRegisteredExtSvcId', extService.body.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNameInventory}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"inventoryApexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/RegisteredExternalService\",\n            \"referenceId\": \"inventoryRegisteredExternalService\",\n            \"body\": {\n                \"ExternalServiceProviderId\": \"@{inventoryApexClass.records[0].Id}\",\n                \"ExternalServiceProviderType\": \"Inventory\",\n                \"DeveloperName\": \"{{extSvcDeveloperNameInventory}}\",\n                \"MasterLabel\": \"{{extSvcDeveloperNameInventory}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Inventory Store Integrated Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let body = pm.response.json();",
											"    pm.expect(body.id).to.exist;",
											"    pm.expect(body.id).to.be.a.string;",
											"    pm.expect(body.success).to.exist;",
											"    pm.expect(body.success).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Integration\": \"Inventory__{{extSvcDeveloperNameInventory}}\",\n    \"StoreId\": \"{{_webStoreId}}\",\n    \"ServiceProviderType\": \"Inventory\"\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/sobjects/StoreIntegratedService",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"sobjects",
										"StoreIntegratedService"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Inventory External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"const validateResults = (refId) => {",
											"    pm.test(`Validate ${refId}`, () => {",
											"        let data = pm.response.json();",
											"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
											"        pm.expect(refResult).to.exist;",
											"        pm.expect(refResult.body).to.exist;",
											"        pm.expect(refResult.body.records).to.exist;",
											"        pm.expect(refResult.body.records).to.be.an('array');",
											"        pm.expect(refResult.body.records.length).to.eql(1);",
											"        pm.expect(refResult.body.records[0].Id).to.exist;",
											"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
											"        pm.collectionVariables.set(`_${refId}Id`, refResult.body.records[0].Id);",
											"    });",
											"};",
											"",
											"validateResults('inventoryApexClass');",
											"validateResults('inventoryRegisteredExternalService');",
											"validateResults('inventoryStoreIntegratedService');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNameInventory}}'\",\n            \"referenceId\": \"inventoryApexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+Language,+MasterLabel,+NamespacePrefix,+ExternalServiceProviderId,+ExternalServiceProviderType+FROM+RegisteredExternalService+WHERE+ExternalServiceProviderId+=+'@{inventoryApexClass.records[0].Id}'+AND+DeveloperName+=+'{{extSvcDeveloperNameInventory}}'+AND+ExternalServiceProviderType+=+'Inventory'\",\n            \"referenceId\": \"inventoryRegisteredExternalService\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+StoreId,+Integration,+ServiceProviderType+FROM+StoreIntegratedService+WHERE+Integration+=+'Inventory__{{extSvcDeveloperNameInventory}}'+AND+ServiceProviderType='Inventory'+AND StoreId='{{_webStoreId}}'\",\n            \"referenceId\": \"inventoryStoreIntegratedService\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Shipment",
					"item": [
						{
							"name": "Register Shipment External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let data = pm.response.json();",
											"    const extService = data.compositeResponse.find((result) => result.referenceId === 'shipmentRegisteredExternalService');",
											"    pm.expect(extService).to.exist;",
											"    pm.expect(extService.httpStatusCode).to.eql(201);",
											"    pm.expect(extService.body).to.exist;",
											"    pm.expect(extService.body.id).to.exist;",
											"    pm.expect(extService.body.id).to.be.a.string;",
											"    pm.collectionVariables.set('_shipmentRegisteredExtSvcId', extService.body.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNameShipment}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"shipmentApexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/RegisteredExternalService\",\n            \"referenceId\": \"shipmentRegisteredExternalService\",\n            \"body\": {\n                \"ExternalServiceProviderId\": \"@{shipmentApexClass.records[0].Id}\",\n                \"ExternalServiceProviderType\": \"Shipment\",\n                \"DeveloperName\": \"{{extSvcDeveloperNameShipment}}\",\n                \"MasterLabel\": \"{{extSvcDeveloperNameShipment}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Shipment Store Integrated Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let body = pm.response.json();",
											"    pm.expect(body.id).to.exist;",
											"    pm.expect(body.id).to.be.a.string;",
											"    pm.expect(body.success).to.exist;",
											"    pm.expect(body.success).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Integration\": \"Shipment__{{extSvcDeveloperNameShipment}}\",\n    \"StoreId\": \"{{_webStoreId}}\",\n    \"ServiceProviderType\": \"Shipment\"\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/sobjects/StoreIntegratedService",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"sobjects",
										"StoreIntegratedService"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Shipment External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"const validateResults = (refId) => {",
											"    pm.test(`Validate ${refId}`, () => {",
											"        let data = pm.response.json();",
											"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
											"        pm.expect(refResult).to.exist;",
											"        pm.expect(refResult.body).to.exist;",
											"        pm.expect(refResult.body.records).to.exist;",
											"        pm.expect(refResult.body.records).to.be.an('array');",
											"        pm.expect(refResult.body.records.length).to.eql(1);",
											"        pm.expect(refResult.body.records[0].Id).to.exist;",
											"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
											"        pm.collectionVariables.set(`_${refId}Id`, refResult.body.records[0].Id);",
											"    });",
											"};",
											"",
											"validateResults('shipmentApexClass');",
											"validateResults('shipmentRegisteredExternalService');",
											"validateResults('shipmentStoreIntegratedService');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNameShipment}}'\",\n            \"referenceId\": \"shipmentApexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+Language,+MasterLabel,+NamespacePrefix,+ExternalServiceProviderId,+ExternalServiceProviderType+FROM+RegisteredExternalService+WHERE+ExternalServiceProviderId+=+'@{shipmentApexClass.records[0].Id}'+AND+DeveloperName+=+'{{extSvcDeveloperNameShipment}}'+AND+ExternalServiceProviderType+=+'Shipment'\",\n            \"referenceId\": \"shipmentRegisteredExternalService\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+StoreId,+Integration,+ServiceProviderType+FROM+StoreIntegratedService+WHERE+Integration+=+'Shipment__{{extSvcDeveloperNameShipment}}'+AND+ServiceProviderType='Shipment'+AND StoreId='{{_webStoreId}}'\",\n            \"referenceId\": \"shipmentStoreIntegratedService\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tax",
					"item": [
						{
							"name": "Register Tax External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let data = pm.response.json();",
											"    const extService = data.compositeResponse.find((result) => result.referenceId === 'taxRegisteredExternalService');",
											"    pm.expect(extService).to.exist;",
											"    pm.expect(extService.httpStatusCode).to.eql(201);",
											"    pm.expect(extService.body).to.exist;",
											"    pm.expect(extService.body.id).to.exist;",
											"    pm.expect(extService.body.id).to.be.a.string;",
											"    pm.collectionVariables.set('_taxRegisteredExtSvcId', extService.body.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNameTax}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"taxApexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/RegisteredExternalService\",\n            \"referenceId\": \"taxRegisteredExternalService\",\n            \"body\": {\n                \"ExternalServiceProviderId\": \"@{taxApexClass.records[0].Id}\",\n                \"ExternalServiceProviderType\": \"Tax\",\n                \"DeveloperName\": \"{{extSvcDeveloperNameTax}}\",\n                \"MasterLabel\": \"{{extSvcDeveloperNameTax}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Tax Store Integrated Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let body = pm.response.json();",
											"    pm.expect(body.id).to.exist;",
											"    pm.expect(body.id).to.be.a.string;",
											"    pm.expect(body.success).to.exist;",
											"    pm.expect(body.success).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Integration\": \"Tax__{{extSvcDeveloperNameTax}}\",\n    \"StoreId\": \"{{_webStoreId}}\",\n    \"ServiceProviderType\": \"Tax\"\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/sobjects/StoreIntegratedService",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"sobjects",
										"StoreIntegratedService"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tax External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"const validateResults = (refId) => {",
											"    pm.test(`Validate ${refId}`, () => {",
											"        let data = pm.response.json();",
											"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
											"        pm.expect(refResult).to.exist;",
											"        pm.expect(refResult.body).to.exist;",
											"        pm.expect(refResult.body.records).to.exist;",
											"        pm.expect(refResult.body.records).to.be.an('array');",
											"        pm.expect(refResult.body.records.length).to.eql(1);",
											"        pm.expect(refResult.body.records[0].Id).to.exist;",
											"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
											"        pm.collectionVariables.set(`_${refId}Id`, refResult.body.records[0].Id);",
											"    });",
											"};",
											"",
											"validateResults('taxApexClass');",
											"validateResults('taxRegisteredExternalService');",
											"validateResults('taxStoreIntegratedService');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNameTax}}'\",\n            \"referenceId\": \"taxApexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+Language,+MasterLabel,+NamespacePrefix,+ExternalServiceProviderId,+ExternalServiceProviderType+FROM+RegisteredExternalService+WHERE+ExternalServiceProviderId+=+'@{taxApexClass.records[0].Id}'+AND+DeveloperName+=+'{{extSvcDeveloperNameTax}}'+AND+ExternalServiceProviderType+=+'Tax'\",\n            \"referenceId\": \"taxRegisteredExternalService\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+StoreId,+Integration,+ServiceProviderType+FROM+StoreIntegratedService+WHERE+Integration+=+'Tax__{{extSvcDeveloperNameTax}}'+AND+ServiceProviderType='Tax'+AND StoreId='{{_webStoreId}}'\",\n            \"referenceId\": \"taxStoreIntegratedService\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Price",
					"item": [
						{
							"name": "Register Price External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let data = pm.response.json();",
											"    const extService = data.compositeResponse.find((result) => result.referenceId === 'priceRegisteredExternalService');",
											"    pm.expect(extService).to.exist;",
											"    pm.expect(extService.httpStatusCode).to.eql(201);",
											"    pm.expect(extService.body).to.exist;",
											"    pm.expect(extService.body.id).to.exist;",
											"    pm.expect(extService.body.id).to.be.a.string;",
											"    pm.collectionVariables.set('_priceRegisteredExtSvcId', extService.body.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNamePrice}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"priceApexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/RegisteredExternalService\",\n            \"referenceId\": \"priceRegisteredExternalService\",\n            \"body\": {\n                \"ExternalServiceProviderId\": \"@{priceApexClass.records[0].Id}\",\n                \"ExternalServiceProviderType\": \"Price\",\n                \"DeveloperName\": \"{{extSvcDeveloperNamePrice}}\",\n                \"MasterLabel\": \"{{extSvcDeveloperNamePrice}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Price Store Integrated Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate result and save collection variables', () => {",
											"    let body = pm.response.json();",
											"    pm.expect(body.id).to.exist;",
											"    pm.expect(body.id).to.be.a.string;",
											"    pm.expect(body.success).to.exist;",
											"    pm.expect(body.success).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Integration\": \"Price__{{extSvcDeveloperNamePrice}}\",\n    \"StoreId\": \"{{_webStoreId}}\",\n    \"ServiceProviderType\": \"Price\"\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/sobjects/StoreIntegratedService",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"sobjects",
										"StoreIntegratedService"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Price External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"const validateResults = (refId) => {",
											"    pm.test(`Validate ${refId}`, () => {",
											"        let data = pm.response.json();",
											"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
											"        pm.expect(refResult).to.exist;",
											"        pm.expect(refResult.body).to.exist;",
											"        pm.expect(refResult.body.records).to.exist;",
											"        pm.expect(refResult.body.records).to.be.an('array');",
											"        pm.expect(refResult.body.records.length).to.eql(1);",
											"        pm.expect(refResult.body.records[0].Id).to.exist;",
											"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
											"        pm.collectionVariables.set(`_${refId}Id`, refResult.body.records[0].Id);",
											"    });",
											"};",
											"",
											"validateResults('priceApexClass');",
											"validateResults('priceRegisteredExternalService');",
											"validateResults('priceStoreIntegratedService');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{extSvcApexClassNamePrice}}'\",\n            \"referenceId\": \"priceApexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+Language,+MasterLabel,+NamespacePrefix,+ExternalServiceProviderId,+ExternalServiceProviderType+FROM+RegisteredExternalService+WHERE+ExternalServiceProviderId+=+'@{priceApexClass.records[0].Id}'+AND+DeveloperName+=+'{{extSvcDeveloperNamePrice}}'+AND+ExternalServiceProviderType+=+'Price'\",\n            \"referenceId\": \"priceRegisteredExternalService\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+StoreId,+Integration,+ServiceProviderType+FROM+StoreIntegratedService+WHERE+Integration+=+'Price__{{extSvcDeveloperNamePrice}}'+AND+ServiceProviderType='Price'+AND StoreId='{{_webStoreId}}'\",\n            \"referenceId\": \"priceStoreIntegratedService\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Register Payment External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate paymentGateway', () => {",
											"    let data = pm.response.json();",
											"    const paymentGateway = data.compositeResponse.find((result) => result.referenceId === 'paymentGateway');",
											"    pm.expect(paymentGateway).to.exist;",
											"    pm.expect(paymentGateway.body.records).to.exist;",
											"    pm.expect(paymentGateway.body.records).to.be.an('array');",
											"    pm.expect(paymentGateway.body.records.length).to.eql(1);",
											"    pm.expect(paymentGateway.body.records[0].Id).to.exist;",
											"    pm.expect(paymentGateway.body.records[0].Id).to.be.a.string;",
											"});",
											"",
											"pm.test('Validate paymentStoreIntegratedService', () => {",
											"    let data = pm.response.json();",
											"    const paymentIntSvc = data.compositeResponse.find((result) => result.referenceId === 'paymentStoreIntegratedService');",
											"    pm.expect(paymentIntSvc).to.exist;",
											"    pm.expect(paymentIntSvc.httpStatusCode).to.eql(201);",
											"    pm.expect(paymentIntSvc.body.id).to.exist;",
											"    pm.expect(paymentIntSvc.body.id).to.be.a.string;",
											"    pm.expect(paymentIntSvc.body.success).to.exist;",
											"    pm.expect(paymentIntSvc.body.success).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+PaymentGateway+WHERE+PaymentGatewayName+=+'{{paymentGatewayName}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"paymentGateway\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{version}}/sobjects/StoreIntegratedService\",\n            \"referenceId\": \"paymentStoreIntegratedService\",\n            \"body\": {\n                \"Integration\": \"@{paymentGateway.records[0].Id}\",\n                \"StoreId\": \"{{_webStoreId}}\",\n                \"ServiceProviderType\": \"Payment\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Payment External Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"const validateResults = (refId) => {",
											"    pm.test(`Validate ${refId}`, () => {",
											"        let data = pm.response.json();",
											"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
											"        pm.expect(refResult).to.exist;",
											"        pm.expect(refResult.body).to.exist;",
											"        pm.expect(refResult.body.records).to.exist;",
											"        pm.expect(refResult.body.records).to.be.an('array');",
											"        pm.expect(refResult.body.records.length).to.eql(1);",
											"        pm.expect(refResult.body.records[0].Id).to.exist;",
											"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
											"        pm.collectionVariables.set(`_${refId}Id`, refResult.body.records[0].Id);",
											"    });",
											"};",
											"",
											"validateResults('apexClass');",
											"validateResults('namedCredential');",
											"validateResults('paymentGatewayProvider');",
											"validateResults('paymentGateway');",
											"validateResults('paymentStoreIntegratedService');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+Endpoint+FROM+NamedCredential+WHERE+DeveloperName+=+'{{namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+DeveloperName,+MasterLabel,+ApexAdapterId,+IdempotencySupported,+Language+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id+FROM+PaymentGateway+WHERE+PaymentGatewayProviderId+=+'@{paymentGatewayProvider.records[0].Id}'+AND+MerchantCredentialId+=+'@{namedCredential.records[0].Id}'+AND+PaymentGatewayName+=+'{{paymentGatewayName}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"paymentGateway\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+StoreId,+Integration,+ServiceProviderType+FROM+StoreIntegratedService+WHERE+Integration+=+'@{paymentGateway.records[0].Id}'+AND+ServiceProviderType='Payment'+AND StoreId='{{_webStoreId}}'\",\n            \"referenceId\": \"paymentStoreIntegratedService\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Webstore Product Import",
			"item": [
				{
					"name": "Get Composite Values",
					"item": [
						{
							"name": "Get Composite Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"const validateResults = (refId) => {",
											"    pm.test(`Validate and set collection variable: _${refId}Id`, () => {",
											"        let data = pm.response.json();",
											"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
											"        pm.expect(refResult).to.exist;",
											"        pm.expect(refResult.body).to.exist;",
											"        pm.expect(refResult.body.records).to.exist;",
											"        pm.expect(refResult.body.records).to.be.an('array');",
											"        pm.expect(refResult.body.records.length).to.eql(1);",
											"        pm.expect(refResult.body.records[0].Id).to.exist;",
											"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
											"        pm.collectionVariables.set(`_${refId}Id`, refResult.body.records[0].Id);",
											"    });",
											"};",
											"",
											"validateResults('productCatalog');",
											"validateResults('cmsWorkspace');",
											"validateResults('priceBookOriginal');",
											"validateResults('priceBookSales');",
											"validateResults('defaultEntitlementPolicy');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'\",\n            \"referenceId\": \"productCatalog\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+Description+FROM+ManagedContentSpace+WHERE+Name+LIKE+'%25{{webStoreName}}%25'+LIMIT+1\",\n            \"referenceId\": \"cmsWorkspace\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name+FROM+Pricebook2+WHERE+Name+=+'{{priceBookOriginalName}}'+LIMIT+1\",\n            \"referenceId\": \"priceBookOriginal\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name+FROM+Pricebook2+WHERE+Name+=+'{{priceBookSalesName}}'+LIMIT+1\",\n            \"referenceId\": \"priceBookSales\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{version}}/query/?q=SELECT+Id,+Name+FROM+CommerceEntitlementPolicy+WHERE+Name+LIKE+'%25{{webStoreName}}%25'+LIMIT+1\",\n            \"referenceId\": \"defaultEntitlementPolicy\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/composite",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"composite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload CSV",
					"item": [
						{
							"name": "base64 encode file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"require('btoa');",
											"",
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.data).to.exist;",
											"    pm.expect(body.data).to.be.a('string');",
											"    const { data: rawData } = body;",
											"    const encodedFileData = btoa(rawData);",
											"    pm.collectionVariables.set('_versionData', encodedFileData)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "postman-echo.com/post",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"post"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.success).to.be.true;",
											"    pm.expect(data.id).to.exist;",
											"    pm.expect(data.id).to.be.a.string;",
											"    pm.collectionVariables.set('_contentVersionId', data.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Title\": \"{{productCsvFileName}}\",\n    \"PathOnClient\": \"{{productCsvFileName}}.csv\",\n    \"ContentLocation\": \"S\",\n    \"VersionData\": \"{{_versionData}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/sobjects/ContentVersion",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"sobjects",
										"ContentVersion"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Content Document by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.records).to.exist;",
											"    pm.expect(data.records).to.be.an('array');",
											"    pm.expect(data.records.length).to.eql(1);",
											"    const contentVersion = data.records[0];",
											"    pm.expect(contentVersion.ContentDocumentId).to.exist;",
											"    pm.expect(contentVersion.ContentDocumentId).to.be.a.string;",
											"    pm.collectionVariables.set('_contentDocumentId', contentVersion.ContentDocumentId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+ContentDocumentId+FROM+ContentVersion+WHERE+Id=+'{{_contentVersionId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+ContentDocumentId+FROM+ContentVersion+WHERE+Id=+'{{_contentVersionId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Content Document by Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.records).to.exist;",
											"    pm.expect(data.records).to.be.an('array');",
											"    pm.expect(data.records.length).to.eql(1);",
											"    const contentDocument = data.records[0];",
											"    pm.expect(contentDocument.Id).to.exist;",
											"    pm.expect(contentDocument.Id).to.be.a.string;",
											"    pm.collectionVariables.set('_contentDocumentId', contentDocument.Id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+Title+FROM+ContentDocument+WHERE+Title+=+'{{productCsvFileName}}'+LIMIT+1",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Title+FROM+ContentDocument+WHERE+Title+=+'{{productCsvFileName}}'+LIMIT+1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Import Products",
					"item": [
						{
							"name": "Import Product CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.status).to.exist;",
											"    pm.expect(data.status).to.be.a.string;",
											"    pm.expect(data.status).to.eql(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"importConfiguration\": {\n        \"importSource\": {\n            \"contentVersionId\": \"{{_contentDocumentId}}\"\n        },\n        \"importSettings\": {\n            \"category\": {\n                \"productCatalogId\": \"{{_productCatalogId}}\"\n            },\n            \"media\": {\n                \"cmsWorkspaceId\": \"{{_cmsWorkspaceId}}\"\n            },\n            \"price\": {\n                \"pricebookAliasToIdMapping\": {\n                    \"original\": \"{{_priceBookOriginalId}}\",\n                    \"sales\": \"{{_priceBookSalesId}}\"\n                }\n            },\n            \"entitlement\": {\n                \"defaultEntitlementPolicyId\": \"{{_defaultEntitlementPolicyId}}\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/management/webstores/{{_webStoreId}}/product-import",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"management",
										"webstores",
										"{{_webStoreId}}",
										"product-import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Sample Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.status).to.exist;",
											"    pm.expect(data.status).to.be.a.string;",
											"    pm.expect(data.status).to.eql(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"importConfiguration\": {\n        \"importSource\": {\n            \"sampleData\": \"{{importSourceSampleData}}\"\n        },\n        \"importSettings\": {\n            \"category\": {\n                \"productCatalogId\": \"{{_productCatalogId}}\"\n            },\n            \"media\": {\n                \"cmsWorkspaceId\": \"{{_cmsWorkspaceId}}\"\n            },\n            \"price\": {\n                \"pricebookAliasToIdMapping\": {\n                    \"original\": \"{{_priceBookOriginalId}}\",\n                    \"sales\": \"{{_priceBookSalesId}}\"\n                }\n            },\n            \"entitlement\": {\n                \"defaultEntitlementPolicyId\": \"{{_defaultEntitlementPolicyId}}\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/management/webstores/{{_webStoreId}}/product-import",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"management",
										"webstores",
										"{{_webStoreId}}",
										"product-import"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Webstore Products",
			"item": [
				{
					"name": "Get Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productSkus = [];",
									"",
									"for (let i = 1; i <= 3; i++) {",
									"    let productSku = pm.environment.get(`productSku${i}`);",
									"    if (productSku) {",
									"        productSkus.push(productSku);",
									"    }",
									"}",
									"",
									"pm.collectionVariables.set('_productSkus', productSkus.join());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/products?skus={{_productSkus}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"products"
							],
							"query": [
								{
									"key": "skus",
									"value": "{{_productSkus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/products/{{productId1}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"products",
								"{{productId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get OMS Product Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/order-management/webstores/{{_webStoreId}}/products/{{productId1}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"order-management",
								"webstores",
								"{{_webStoreId}}",
								"products",
								"{{productId1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Webstore Cart",
			"item": [
				{
					"name": "Query Carts",
					"item": [
						{
							"name": "Query Carts by AccountId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.records).to.exist;",
											"    pm.expect(data.records).to.be.an('array');",
											"    pm.expect(data.records.length).to.be.greaterThan(0);",
											"    const webCart = data.records[0];",
											"    pm.expect(webCart.Id).to.exist;",
											"    pm.expect(webCart.Id).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', webCart.Id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+WebStoreId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'+AND+AccountId+=+'{{effectiveAccountId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name,+WebStoreId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'+AND+AccountId+=+'{{effectiveAccountId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query Carts by WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.records).to.exist;",
											"    pm.expect(data.records).to.be.an('array');",
											"    pm.expect(data.records.length).to.be.greaterThan(0);",
											"    const webCart = data.records[0];",
											"    pm.expect(webCart.Id).to.exist;",
											"    pm.expect(webCart.Id).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', webCart.Id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+AccountId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name,+AccountId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Cart",
					"item": [
						{
							"name": "Get Active Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartId).to.exist;",
											"    pm.expect(data.cartId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', data.cartId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"active"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Cart",
					"item": [
						{
							"name": "Delete Active Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
											"});",
											"",
											"pm.collectionVariables.unset('_cartId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"active"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
											"});",
											"",
											"pm.collectionVariables.unset('_cartId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Cart",
					"item": [
						{
							"name": "Create a Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartId).to.exist;",
											"    pm.expect(data.cartId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', data.cartId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Headless Cart\",\n    \"type\": \"Cart\",\n    \"effectiveAccountId\": \"{{effectiveAccountId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cart Items",
					"item": [
						{
							"name": "Add Item to Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartItemId).to.exist;",
											"    pm.expect(data.cartItemId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartItemId', data.cartItemId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"productId\": \"{{productId1}}\",\n    \"quantity\": \"1\",\n    \"type\": \"Product\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Items to Cart (Batch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.results).to.exist;",
											"    pm.expect(data.results).to.be.an('array');",
											"    pm.expect(data.results.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"inputs\": [\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId1}}\",\n                \"quantity\": \"1\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId2}}\",\n                \"quantity\": \"2\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId3}}\",\n                \"quantity\": \"3\",\n                \"type\": \"Product\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/batch?effectiveAccountId={{effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items",
										"batch"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartItems).to.exist;",
											"    pm.expect(data.cartItems).to.be.an('array');",
											"    pm.expect(data.cartItems.length).to.be.greaterThan(0);",
											"    const item = data.cartItems[0];",
											"    pm.expect(item.cartItem).to.exist;",
											"    pm.expect(item.cartItem.cartItemId).to.exist;",
											"    pm.expect(item.cartItem.cartItemId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartItemId', item.cartItem.cartItemId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/{{_cartItemId}}?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items",
										"{{_cartItemId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Cart Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quantity\": \"5\"\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/{{_cartItemId}}?effectiveAccountId={{effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items",
										"{{_cartItemId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Webstore Checkout",
			"item": [
				{
					"name": "Create Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{_cartId}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Delivery Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_desiredDeliveryDate', now.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deliveryAddress\": {\n        \"name\": \"{{deliveryAddressFirstName}} {{deliveryAddressLastName}}\",\n        \"street\": \"{{deliveryAddressStreet}}\",\n        \"city\": \"{{deliveryAddressCity}}\",\n        \"region\": \"{{deliveryAddressRegion}}\",\n        \"postalCode\": \"{{deliveryAddressPostalCode}}\",\n        \"country\": \"{{deliveryAddressCountry}}\"\n    },\n    \"desiredDeliveryDate\": \"{{_desiredDeliveryDate}}\",\n    \"shippingInstructions\": \"{{shippingInstructions}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Checkout Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"",
									"    // set an available delivery method",
									"    pm.expect(data.deliveryGroups).to.exist;",
									"    pm.expect(data.deliveryGroups.items).to.exist;",
									"    pm.expect(data.deliveryGroups.items).to.be.an('array');",
									"    pm.expect(data.deliveryGroups.items.length).to.be.greaterThan(0);",
									"    const availableDeliveryMethod = data.deliveryGroups.items[0];",
									"    pm.expect(availableDeliveryMethod.id).to.exist;",
									"    pm.expect(availableDeliveryMethod.id).to.be.a.string;",
									"    pm.collectionVariables.set('_deliveryMethodId', availableDeliveryMethod.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Delivery Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"delivery​MethodId\": \"{{_deliveryMethodId}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token).to.exist;",
									"    pm.expect(data.token).to.be.a.string;",
									"    pm.collectionVariables.set('_paymentToken', data.token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_expiryMonth', now.getMonth() + 4);",
									"pm.collectionVariables.set('_expiryYear', now.getFullYear() + 5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardPaymentMethod\": {\n        \"cardHolderName\": \"{{cardHolderName}}\",\n        \"cardNumber\": \"{{cardNumber}}\",\n        \"expiryMonth\": {{_expiryMonth}},\n        \"expiryYear\": {{_expiryYear}},\n        \"cvv\": {{cardCvv}},\n        \"cardType\": \"{{cardType}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/payments/token",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"payments",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.salesforceResultCode).to.exist;",
									"    pm.expect(data.salesforceResultCode).to.be.a.string;",
									"    pm.expect(data.salesforceResultCode).to.eql(\"Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentToken\": \"{{_paymentToken}}\",\n    \"requestType\": \"{{paymentRequestType}}\",\n    \"billingAddress\": {\n        \"name\": \"{{billingAddressFirstName}} {{billingAddressLastName}}\",\n        \"street\": \"{{billingAddressStreet}}\",\n        \"city\": \"{{billingAddressCity}}\",\n        \"region\": \"{{billingAddressRegion}}\",\n        \"postalCode\": \"{{billingAddressPostalCode}}\",\n        \"country\": \"{{billingAddressCountry}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/payments",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart to Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.orderReferenceNumber).to.exist;",
									"    pm.expect(data.orderReferenceNumber).to.be.a.string;",
									"    pm.collectionVariables.set('_orderReferenceNumber', data.orderReferenceNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/orders",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checkout - Happy Path",
			"item": [
				{
					"name": "1. Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
									"    const url = result.serverUrl.split('/');",
									"",
									"    pm.expect(result.sessionId).to.exist;",
									"    pm.expect(result.sessionId).to.be.a.string;",
									"",
									"    pm.collectionVariables.set('_accessToken', result.sessionId);",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + \"//\" + url[2]);",
									"    pm.collectionVariables.set('_userId', result.userId);",
									"    pm.collectionVariables.set('orgId', result.userInfo.organizationId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8"
							},
							{
								"key": "SOAPAction",
								"value": "login"
							},
							{
								"key": "Accept",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <env:Body>\n        <n1:login>\n            <n1:username><![CDATA[{{username}}]]></n1:username>\n            <n1:password><![CDATA[{{password}}]]></n1:password>\n        </n1:login>\n    </env:Body>\n</env:Envelope>"
						},
						"url": {
							"raw": "{{loginUrl}}/services/Soap/u/{{version}}",
							"host": [
								"{{loginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{version}}"
							]
						},
						"description": "Logs in to the login server and starts a client session.\n\nMake sure to set the `url`, `username`, `password` and `secretToken` environment variables before sending this request.\nOn success, the request will automatically collect your authentication token for later use."
					},
					"response": []
				},
				{
					"name": "2. Get Webstore Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.records).to.exist;",
									"    pm.expect(data.records).to.be.an('array');",
									"    pm.expect(data.records.length).to.eql(1);",
									"    const webStore = data.records[0];",
									"    pm.expect(webStore.Id).to.exist;",
									"    pm.expect(webStore.Id).to.be.a.string;",
									"    pm.collectionVariables.set('_webStoreId', webStore.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"query",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Login Buyer (optional, not needed for OOBO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
									"    const url = result.serverUrl.split('/');",
									"",
									"    pm.expect(result.sessionId).to.exist;",
									"    pm.expect(result.sessionId).to.be.a.string;",
									"",
									"    pm.collectionVariables.set('_accessToken', result.sessionId);",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + \"//\" + url[2]);",
									"    pm.collectionVariables.set('_userId', result.userId);",
									"    pm.collectionVariables.set('orgId', result.userInfo.organizationId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8"
							},
							{
								"key": "SOAPAction",
								"value": "login"
							},
							{
								"key": "Accept",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <env:Header>\n        <!--\n        ensure API is enabled\n        Administration Setup > Manage Users > Profiles > Users Profile > Administrative Permissions > API Enabled\n        -->\n        <n1:LoginScopeHeader>\n            <n1:organizationId>{{orgId}}</n1:organizationId>\n        </n1:LoginScopeHeader>\n    </env:Header>\n    <env:Body>\n        <n1:login>\n            <n1:username><![CDATA[{{buyerUsername}}]]></n1:username>\n            <n1:password><![CDATA[{{buyerPassword}}]]></n1:password>\n        </n1:login>\n    </env:Body>\n</env:Envelope>"
						},
						"url": {
							"raw": "{{loginUrl}}/services/Soap/u/{{version}}",
							"host": [
								"{{loginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{version}}"
							]
						},
						"description": "Logs in to the login server and starts a client session.\n\nMake sure to set the `url`, `username`, `password` and `secretToken` environment variables before sending this request.\nOn success, the request will automatically collect your authentication token for later use."
					},
					"response": []
				},
				{
					"name": "4. Delete Active Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204 or 404', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});",
									"",
									"pm.collectionVariables.unset('_cartId');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{effectiveAccountId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"carts",
								"active"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "{{effectiveAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create a Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.cartId).to.exist;",
									"    pm.expect(data.cartId).to.be.a.string;",
									"    pm.collectionVariables.set('_cartId', data.cartId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Headless Cart\",\n    \"type\": \"Cart\",\n    \"effectiveAccountId\": \"{{effectiveAccountId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Add Items to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.results).to.exist;",
									"    pm.expect(data.results).to.be.an('array');",
									"    pm.expect(data.results.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inputs\": [\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId1}}\",\n                \"quantity\": \"1\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId2}}\",\n                \"quantity\": \"2\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId3}}\",\n                \"quantity\": \"3\",\n                \"type\": \"Product\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/batch?effectiveAccountId={{effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"carts",
								"{{_cartId}}",
								"cart-items",
								"batch"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "{{effectiveAccountId}}"
								},
								{
									"key": "currencyIsoCode",
									"value": "{{currencyIsoCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Create Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{_cartId}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Patch Delivery Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_desiredDeliveryDate', now.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deliveryAddress\": {\n        \"name\": \"{{deliveryAddressFirstName}} {{deliveryAddressLastName}}\",\n        \"street\": \"{{deliveryAddressStreet}}\",\n        \"city\": \"{{deliveryAddressCity}}\",\n        \"region\": \"{{deliveryAddressRegion}}\",\n        \"postalCode\": \"{{deliveryAddressPostalCode}}\",\n        \"country\": \"{{deliveryAddressCountry}}\"\n    },\n    \"desiredDeliveryDate\": \"{{_desiredDeliveryDate}}\",\n    \"shippingInstructions\": \"{{shippingInstructions}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Create Payment Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token).to.exist;",
									"    pm.expect(data.token).to.be.a.string;",
									"    pm.collectionVariables.set('_paymentToken', data.token);",
									"});",
									"",
									"// wait 5 seconds before attempting auth payment",
									"setTimeout(() => {}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_expiryMonth', now.getMonth() + 4);",
									"pm.collectionVariables.set('_expiryYear', now.getFullYear() + 5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardPaymentMethod\": {\n        \"cardHolderName\": \"{{cardHolderName}}\",\n        \"cardNumber\": \"{{cardNumber}}\",\n        \"expiryMonth\": {{_expiryMonth}},\n        \"expiryYear\": {{_expiryYear}},\n        \"cvv\": {{cardCvv}},\n        \"cardType\": \"{{cardType}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/payments/token",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"payments",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Authorize Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.salesforceResultCode).to.exist;",
									"    pm.expect(data.salesforceResultCode).to.be.a.string;",
									"    pm.expect(data.salesforceResultCode).to.eql(\"Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentToken\": \"{{_paymentToken}}\",\n    \"requestType\": \"{{paymentRequestType}}\",\n    \"billingAddress\": {\n        \"name\": \"{{billingAddressFirstName}} {{billingAddressLastName}}\",\n        \"street\": \"{{billingAddressStreet}}\",\n        \"city\": \"{{billingAddressCity}}\",\n        \"region\": \"{{billingAddressRegion}}\",\n        \"postalCode\": \"{{billingAddressPostalCode}}\",\n        \"country\": \"{{billingAddressCountry}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/payments",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Cart to Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.orderReferenceNumber).to.exist;",
									"    pm.expect(data.orderReferenceNumber).to.be.a.string;",
									"    pm.collectionVariables.set('_orderReferenceNumber', data.orderReferenceNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/orders",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "_accessToken",
			"value": ""
		},
		{
			"key": "_instanceUrl",
			"value": ""
		},
		{
			"key": "_userId",
			"value": ""
		},
		{
			"key": "orgId",
			"value": ""
		},
		{
			"key": "_webStoreId",
			"value": ""
		},
		{
			"key": "_cartItemId",
			"value": ""
		},
		{
			"key": "_checkoutId",
			"value": ""
		},
		{
			"key": "_desiredDeliveryDate",
			"value": ""
		},
		{
			"key": "_expiryMonth",
			"value": ""
		},
		{
			"key": "_expiryYear",
			"value": ""
		},
		{
			"key": "_paymentToken",
			"value": ""
		},
		{
			"key": "_orderReferenceNumber",
			"value": ""
		},
		{
			"key": "_deliveryMethodId",
			"value": ""
		},
		{
			"key": "_cartId",
			"value": ""
		}
	]
}