{
	"info": {
		"_postman_id": "f6fc5acd-048f-42b9-b07e-3fc6ecb48a3e",
		"name": "Salesforce Commerce on Core",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19492"
	},
	"item": [
		{
			"name": "Auth Salesforce API",
			"item": [
				{
					"name": "Authentication Salesforce API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token_type).to.exist;",
									"    pm.expect(data.token_type).to.be.a.string;",
									"    pm.expect(data.access_token).to.exist;",
									"    pm.expect(data.access_token).to.be.a.string;",
									"    const id = data.id.split('/');",
									"",
									"    pm.collectionVariables.set('_accessToken', data.access_token);",
									"    pm.collectionVariables.set('_instanceUrl', data.instance_url);",
									"    pm.collectionVariables.set('_userId', id.pop());",
									"    pm.collectionVariables.set('_orgId', id.pop());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clean up the variables",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}{{secretToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authTokenUrl}}/services/oauth2/token",
							"host": [
								"{{authTokenUrl}}"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Webstore",
			"item": [
				{
					"name": "Query Webstore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.records).to.exist;",
									"    pm.expect(data.records).to.be.an('array');",
									"    pm.expect(data.records.length).to.eql(1);",
									"    const webStore = data.records[0];",
									"    pm.expect(webStore.Id).to.exist;",
									"    pm.expect(webStore.Id).to.be.a.string;",
									"    pm.collectionVariables.set('_webStoreId', webStore.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"query",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Webstore Products",
			"item": [
				{
					"name": "Get Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productSkus = [];",
									"",
									"for (let i = 1; i <= 3; i++) {",
									"    let productSku = pm.environment.get(`productSku${i}`);",
									"    if (productSku) {",
									"        productSkus.push(productSku);",
									"    }",
									"}",
									"",
									"pm.collectionVariables.set('_productSkus', productSkus.join());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/products?skus={{_productSkus}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"products"
							],
							"query": [
								{
									"key": "skus",
									"value": "{{_productSkus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/products/{{productId1}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"products",
								"{{productId1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Webstore Cart",
			"item": [
				{
					"name": "Query Carts",
					"item": [
						{
							"name": "Query Carts by AccountId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.records).to.exist;",
											"    pm.expect(data.records).to.be.an('array');",
											"    pm.expect(data.records.length).to.be.greaterThan(0);",
											"    const webCart = data.records[0];",
											"    pm.expect(webCart.Id).to.exist;",
											"    pm.expect(webCart.Id).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', webCart.Id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+WebStoreId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'+AND+AccountId+=+'{{effectiveAccountId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name,+WebStoreId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'+AND+AccountId+=+'{{effectiveAccountId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query Carts by WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.records).to.exist;",
											"    pm.expect(data.records).to.be.an('array');",
											"    pm.expect(data.records.length).to.be.greaterThan(0);",
											"    const webCart = data.records[0];",
											"    pm.expect(webCart.Id).to.exist;",
											"    pm.expect(webCart.Id).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', webCart.Id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+Name,+AccountId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name,+AccountId+FROM+WebCart+WHERE+WebStoreId+=+'{{_webStoreId}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Cart",
					"item": [
						{
							"name": "Get Active Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartId).to.exist;",
											"    pm.expect(data.cartId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', data.cartId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"active"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Cart",
					"item": [
						{
							"name": "Delete Active Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
											"});",
											"",
											"pm.collectionVariables.unset('_cartId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"active"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
											"});",
											"",
											"pm.collectionVariables.unset('_cartId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Cart",
					"item": [
						{
							"name": "Create a Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartId).to.exist;",
											"    pm.expect(data.cartId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartId', data.cartId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test OOBO Cart\",\n    \"type\": \"Cart\",\n    \"effectiveAccountId\": \"{{effectiveAccountId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cart Items",
					"item": [
						{
							"name": "Add Item to Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartItemId).to.exist;",
											"    pm.expect(data.cartItemId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartItemId', data.cartItemId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"productId\": \"{{productId1}}\",\n    \"quantity\": \"1\",\n    \"type\": \"Product\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Items to Cart (Batch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.results).to.exist;",
											"    pm.expect(data.results).to.be.an('array');",
											"    pm.expect(data.results.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"inputs\": [\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId1}}\",\n                \"quantity\": \"1\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId2}}\",\n                \"quantity\": \"2\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId3}}\",\n                \"quantity\": \"3\",\n                \"type\": \"Product\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/batch?effectiveAccountId={{effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items",
										"batch"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartItems).to.exist;",
											"    pm.expect(data.cartItems).to.be.an('array');",
											"    pm.expect(data.cartItems.length).to.be.greaterThan(0);",
											"    const item = data.cartItems[0];",
											"    pm.expect(item.cartItem).to.exist;",
											"    pm.expect(item.cartItem.cartItemId).to.exist;",
											"    pm.expect(item.cartItem.cartItemId).to.be.a.string;",
											"    pm.collectionVariables.set('_cartItemId', item.cartItem.cartItemId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/{{_cartItemId}}?effectiveAccountId={{effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items",
										"{{_cartItemId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Cart Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quantity\": \"5\"\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/{{_cartItemId}}?effectiveAccountId={{effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{version}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartId}}",
										"cart-items",
										"{{_cartItemId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Webstore Checkout",
			"item": [
				{
					"name": "Create Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{_cartId}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts?effectiveAccountId={{effectiveAccountId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "{{effectiveAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Delivery Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_desiredDeliveryDate', now.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deliveryAddress\": {\n        \"name\": \"{{deliveryAddressFirstName}} {{deliveryAddressLastName}}\",\n        \"street\": \"{{deliveryAddressStreet}}\",\n        \"city\": \"{{deliveryAddressCity}}\",\n        \"region\": \"{{deliveryAddressRegion}}\",\n        \"postalCode\": \"{{deliveryAddressPostalCode}}\",\n        \"country\": \"{{deliveryAddressCountry}}\"\n    },\n    \"desiredDeliveryDate\": \"{{_desiredDeliveryDate}}\",\n    \"shippingInstructions\": \"{{shippingInstructions}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Checkout Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"",
									"    // set an available delivery method",
									"    pm.expect(data.deliveryGroups).to.exist;",
									"    pm.expect(data.deliveryGroups.items).to.exist;",
									"    pm.expect(data.deliveryGroups.items).to.be.an('array');",
									"    pm.expect(data.deliveryGroups.items.length).to.be.greaterThan(0);",
									"    const availableDeliveryMethod = data.deliveryGroups.items[0];",
									"    pm.expect(availableDeliveryMethod.id).to.exist;",
									"    pm.expect(availableDeliveryMethod.id).to.be.a.string;",
									"    pm.collectionVariables.set('_deliveryMethodId', availableDeliveryMethod.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Delivery Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"delivery​MethodId\": \"{{_deliveryMethodId}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token).to.exist;",
									"    pm.expect(data.token).to.be.a.string;",
									"    pm.collectionVariables.set('_paymentToken', data.token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_expiryMonth', now.getMonth() + 4);",
									"pm.collectionVariables.set('_expiryYear', now.getFullYear() + 5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardPaymentMethod\": {\n        \"cardHolderName\": \"{{cardHolderName}}\",\n        \"cardNumber\": \"{{cardNumber}}\",\n        \"expiryMonth\": {{_expiryMonth}},\n        \"expiryYear\": {{_expiryYear}},\n        \"cvv\": {{cardCvv}},\n        \"cardType\": \"{{cardType}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/payments/token",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"payments",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.salesforceResultCode).to.exist;",
									"    pm.expect(data.salesforceResultCode).to.be.a.string;",
									"    pm.expect(data.salesforceResultCode).to.eql(\"Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentToken\": \"{{_paymentToken}}\",\n    \"requestType\": \"{{paymentRequestType}}\",\n    \"billingAddress\": {\n        \"name\": \"{{billingAddressFirstName}} {{billingAddressLastName}}\",\n        \"street\": \"{{billingAddressStreet}}\",\n        \"city\": \"{{billingAddressCity}}\",\n        \"region\": \"{{billingAddressRegion}}\",\n        \"postalCode\": \"{{billingAddressPostalCode}}\",\n        \"country\": \"{{billingAddressCountry}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/payments",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart to Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.orderReferenceNumber).to.exist;",
									"    pm.expect(data.orderReferenceNumber).to.be.a.string;",
									"    pm.collectionVariables.set('_orderReferenceNumber', data.orderReferenceNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/orders",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checkout - Happy Path",
			"item": [
				{
					"name": "Authentication Salesforce API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token_type).to.exist;",
									"    pm.expect(data.token_type).to.be.a.string;",
									"    pm.expect(data.access_token).to.exist;",
									"    pm.expect(data.access_token).to.be.a.string;",
									"    const id = data.id.split('/');",
									"",
									"    pm.collectionVariables.set('_accessToken', data.access_token);",
									"    pm.collectionVariables.set('_instanceUrl', data.instance_url);",
									"    pm.collectionVariables.set('_userId', id.pop());",
									"    pm.collectionVariables.set('_orgId', id.pop());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}{{secretToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authTokenUrl}}/services/oauth2/token",
							"host": [
								"{{authTokenUrl}}"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Webstore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.records).to.exist;",
									"    pm.expect(data.records).to.be.an('array');",
									"    pm.expect(data.records.length).to.eql(1);",
									"    const webStore = data.records[0];",
									"    pm.expect(webStore.Id).to.exist;",
									"    pm.expect(webStore.Id).to.be.a.string;",
									"    pm.collectionVariables.set('_webStoreId', webStore.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/query/?q=SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"query",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "SELECT+Id,+ExternalReference,+Name,+Type,+DefaultTaxLocaleType+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Active Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204 or 404', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});",
									"",
									"pm.collectionVariables.unset('_cartId');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{effectiveAccountId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"carts",
								"active"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "{{effectiveAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.cartId).to.exist;",
									"    pm.expect(data.cartId).to.be.a.string;",
									"    pm.collectionVariables.set('_cartId', data.cartId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test OOBO Cart\",\n    \"type\": \"Cart\",\n    \"effectiveAccountId\": \"{{effectiveAccountId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Items to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.results).to.exist;",
									"    pm.expect(data.results).to.be.an('array');",
									"    pm.expect(data.results.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inputs\": [\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId1}}\",\n                \"quantity\": \"1\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId2}}\",\n                \"quantity\": \"2\",\n                \"type\": \"Product\"\n            }\n        },\n        {\n            \"richInput\": {\n                \"productId\": \"{{productId3}}\",\n                \"quantity\": \"3\",\n                \"type\": \"Product\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartId}}/cart-items/batch?effectiveAccountId={{effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"carts",
								"{{_cartId}}",
								"cart-items",
								"batch"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "{{effectiveAccountId}}"
								},
								{
									"key": "currencyIsoCode",
									"value": "{{currencyIsoCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{_cartId}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts?effectiveAccountId={{effectiveAccountId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "{{effectiveAccountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Delivery Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.checkoutId).to.exist;",
									"    pm.expect(data.checkoutId).to.be.a.string;",
									"    pm.collectionVariables.set('_checkoutId', data.checkoutId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_desiredDeliveryDate', now.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deliveryAddress\": {\n        \"name\": \"{{deliveryAddressFirstName}} {{deliveryAddressLastName}}\",\n        \"street\": \"{{deliveryAddressStreet}}\",\n        \"city\": \"{{deliveryAddressCity}}\",\n        \"region\": \"{{deliveryAddressRegion}}\",\n        \"postalCode\": \"{{deliveryAddressPostalCode}}\",\n        \"country\": \"{{deliveryAddressCountry}}\"\n    },\n    \"desiredDeliveryDate\": \"{{_desiredDeliveryDate}}\",\n    \"shippingInstructions\": \"{{shippingInstructions}}\"\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.token).to.exist;",
									"    pm.expect(data.token).to.be.a.string;",
									"    pm.collectionVariables.set('_paymentToken', data.token);",
									"});",
									"",
									"// wait 5 seconds before attempting auth payment",
									"setTimeout(() => {}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let now = new Date();",
									"pm.collectionVariables.set('_expiryMonth', now.getMonth() + 4);",
									"pm.collectionVariables.set('_expiryYear', now.getFullYear() + 5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardPaymentMethod\": {\n        \"cardHolderName\": \"{{cardHolderName}}\",\n        \"cardNumber\": \"{{cardNumber}}\",\n        \"expiryMonth\": {{_expiryMonth}},\n        \"expiryYear\": {{_expiryYear}},\n        \"cvv\": {{cardCvv}},\n        \"cardType\": \"{{cardType}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/payments/token",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"payments",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.salesforceResultCode).to.exist;",
									"    pm.expect(data.salesforceResultCode).to.be.a.string;",
									"    pm.expect(data.salesforceResultCode).to.eql(\"Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentToken\": \"{{_paymentToken}}\",\n    \"requestType\": \"{{paymentRequestType}}\",\n    \"billingAddress\": {\n        \"name\": \"{{billingAddressFirstName}} {{billingAddressLastName}}\",\n        \"street\": \"{{billingAddressStreet}}\",\n        \"city\": \"{{billingAddressCity}}\",\n        \"region\": \"{{billingAddressRegion}}\",\n        \"postalCode\": \"{{billingAddressPostalCode}}\",\n        \"country\": \"{{billingAddressCountry}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/payments",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart to Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save collection variables', () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data.orderReferenceNumber).to.exist;",
									"    pm.expect(data.orderReferenceNumber).to.be.a.string;",
									"    pm.collectionVariables.set('_orderReferenceNumber', data.orderReferenceNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{version}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/orders",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{version}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"checkouts",
								"{{_checkoutId}}",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "_accessToken",
			"value": ""
		},
		{
			"key": "_instanceUrl",
			"value": ""
		},
		{
			"key": "_userId",
			"value": ""
		},
		{
			"key": "_orgId",
			"value": ""
		},
		{
			"key": "_webStoreId",
			"value": ""
		},
		{
			"key": "_cartId",
			"value": ""
		}
	]
}